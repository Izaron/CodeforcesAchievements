{
  "status": "OK",
  "result": {
    "originalLocale": "ru",
    "allowViewHistory": false,
    "creationTimeSeconds": 1266399138,
    "rating": 0,
    "authorHandle": "MikeMirzayanov",
    "modificationTimeSeconds": 1421506313,
    "id": 79,
    "title": "<p>About the programming languages</p>",
    "locale": "en",
    "content": "<div class=\"ttypography\"><p> Later you'll be introduced to the rules of the Codeforces contests, which differ from those of <a href=\"http://en.wikipedia.org/wiki/ACM-ICPC#Contest_rules\">ACM-ICPC</a>, TopCoder, GCJ, and I hope they'll bring     some difference to the world of programming competitions. Most of the official competitions will be carried out     according to these rules, though there will be more traditional contests. For example, Codeforces Beta Round #1 will     be carried out according to the familiar <a href=\"http://en.wikipedia.org/wiki/ACM-ICPC#Contest_rules\">ACM-ICPC</a>     rules. For some time testing will be based on Windows, but things might change in future, fortunately, the system     supports testing on different platforms, even within one contest. </p> <p> At the present time the system is     configured to support the following programming languages (the compilation and/or the launching line is shown for     each language): </p> <ol style=\"margin-top: 0.0cm;\">     <li style=\"\"><span style=\"\">GNU C++ 4<br />g++.exe -static -DONLINE_JUDGE -lm -s -x c++ -Wl,--stack=268435456 -O2 -o {filename}.exe {file}<br /><br /></span>     </li>     <li style=\"\"><span style=\"\">GNU C++11 4<br />g++.exe -static -DONLINE_JUDGE -lm -s -x c++ -Wl,--stack=268435456 -O2 -std=c++11 -D__USE_MINGW_ANSI_STDIO=0 -o {filename}.exe {file}<br /><br /></span>     </li>     <li style=\"\"><span style=\"\">GNU C 4<br />gcc.exe -static -fno-optimize-sibling-calls -fno-strict-aliasing -DONLINE_JUDGE -fno-asm -lm -s -Wl,--stack=268435456 -O2 -o {filename}.exe {file}<br /><br /></span>     </li>     <li style=\"\">MS VS C++<br />cl /W4 /F268435456 /EHsc /O2 /DONLINE_JUDGE {file}<br /><br /></li>     <li style=\"\">Free Pascal 2<br />-n -O2 -Xs -Sgic -viwn -dONLINE_JUDGE -Cs67107839 -Mdelphi -XS {file} -o{filename}.exe<br /><br /></li>     <li style=\"\"><span style=\"\">Delphi</span> <span style=\"\"> 7<br />dcc32 -Q -$M1048576,67107839 -DONLINE_JUDGE -cc {file}<br /><br /></span>     </li>     <li style=\"\"><span style=\"\">C# Mono 2<br />dmcs -define:ONLINE_JUDGE -o+ -out:{filename}.exe {file}<br /><br /></span>     </li>     <li style=\"\"><span style=\"\">C# .NET<br />csc.exe /o+ /d:ONLINE_JUDGE /r:System.Numerics.dll /out:{filename}.exe {file}<br /><br /></span>     </li>     <li style=\"\"><span style=\"\">Java 6, 7<br />javac -cp &quot;.;*&quot; {file}<br />Ð¸<br />java.exe -Xmx512M -Xss64M -DONLINE_JUDGE=true -Duser.language=en -Duser.region=US -Duser.variant=US -jar %s<br /><br /></span>     </li>     <li style=\"\"><span style=\"\">Ruby<br />ruby.exe %s<br /><br /></span></li>     <li style=\"\"><span style=\"\">Python 2, Python 3<br />python.exe %s<br /><br /></span></li>     <li style=\"\"><span style=\"\">PHP 5<br />php.exe -n -d ONLINE_JUDGE=true -d display_errors=Off -d error_reporting=0 %s<br /><br /></span>     </li>     <li style=\"\"><span style=\"\">Haskell GHC 7<br />ghc --make -O %s<br /><br /></span></li>     <li style=\"\"><span style=\"\">D<br />dmd -L/STACK:268435456 -version=ONLINE_JUDGE -O -release -inline -noboundscheck {file}<br /><br /></span></li>     <li style=\"\"><span style=\"\">OCaml<br />ocamlopt nums.cmxa str.cmxa -pp camlp4o -unsafe -o {filename}.exe-ocaml {file}<br /><br /></span>     </li>     <li style=\"\"><span style=\"\">Scala<br />As Java<br /><br /></span></li>     <li style=\"\"><span style=\"\">JavaScript V8<br />d8 {file}<br /><br /></span></li> </ol> <p><b> It is not guaranteed</b> that all the problems will have solutions in all the given languages (it's     especially about the scripting ones). Probably, I'll later introduce equalizing coefficients for the working time     for some languages. A &quot;plus&quot; next to the version name means that the testing system can use older     versions. If you have suggestions about the possible ways to change the compilation or the launching line, write     about them in your commentaries.</p> <p> It should be mentioned that apart from standard verdicts, you can get     &quot;Denial of judgement&quot;, which usually means that your solution can't be launched, or it has unexpectedly     failed. For example, is the Delphi array is too big, the compiler compiles the code, but the result will be the     incorrect win32 exe-file. Solutions with the verdicts like &quot;Compilation failed&quot;, &quot;Denial of judgement&quot;,     &quot;Judgement failed&quot; will be ignored while summing the results. </p> <p> Moreover, pay attention, please,     that the problems will be given in English as well as in Russian. </p> <p> That's it, see you at Codeforces Beta     Round#1. </p><p> UPD: GCC compiler has been added. </p><p>UPD 2: Added Haskell and F#.</p> <p><b>UPD 3.2: Actual compiler versions are</b></p> <ul>  <li>Mono C# compiler version 3.2.3</li>  <li>DMD32 D Compiler v2.064.2</li>  <li>Delphi 7 [Borland Delphi Version 15.0]</li>  <li>Free Pascal Compiler version 2.6.2</li>  <li>MinGW g++.exe (GCC) 4.9.2</li>  <li>Haskell Glorious Glasgow, version 7.6.1</li>  <li>Java 6 javac 1.6.0_45</li>  <li>Java 7 javac 1.7.0_72</li>  <li>Java 8 javac 1.8.0_25</li>  <li>Ocaml ocamlopt 4.00.1</li>  <li>Perl v5.12.2</li>  <li>PHP 5.3.8</li>  <li>Python 2.7.8</li>  <li>Python 3.4.1</li>  <li>Ruby 2.0.0p353</li>  <li>Scala compiler version 2.11.1</li>  <li>MS VS C++ 2010</li>  <li>JavaScript V8 3.23.0</li> </ul></div>",
    "tags": [
      "codeforces",
      "compilers",
      "rules"
    ]
  }
}